CREATE DATABASE BDP;
USE BDP;

CREATE TABLE game_events (
    EVENTID INT,
    EVENTNUM INT,
    GAME_ID STRING,
    HOMEDESCRIPTION STRING,
    PCTIMESTRING STRING,
    PERIOD INT,
    PLAYER1_ID INT,
    PLAYER1_NAME STRING,
    PLAYER1_TEAM_ABBREVIATION STRING,
    PLAYER1_TEAM_CITY STRING,
    PLAYER1_TEAM_ID INT,
    PLAYER1_TEAM_NICKNAME STRING,
    PLAYER2_ID INT,
    PLAYER2_NAME STRING,
    PLAYER2_TEAM_ABBREVIATION STRING,
    PLAYER2_TEAM_CITY STRING,
    PLAYER2_TEAM_ID INT,
    PLAYER2_TEAM_NICKNAME STRING,
    PLAYER3_ID INT,
    PLAYER3_NAME STRING,
    PLAYER3_TEAM_ABBREVIATION STRING,
    PLAYER3_TEAM_CITY STRING,
    PLAYER3_TEAM_ID INT,
    PLAYER3_TEAM_NICKNAME STRING,
    SCORE STRING,
    SCOREMARGIN STRING,
    VISITORDESCRIPTION STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;


LOAD DATA LOCAL INPATH '/opt/dataset/dataset.csv' INTO TABLE game_events;

WITH Team_Names AS (
    SELECT
        GAME_ID,
        MAX(CASE 
                WHEN HOMEDESCRIPTION LIKE '%PTS%' THEN PLAYER1_TEAM_NICKNAME 
                ELSE NULL 
            END) AS HOME_TEAM_NICKNAME,
        MAX(CASE 
                WHEN VISITORDESCRIPTION LIKE '%PTS%' THEN PLAYER1_TEAM_NICKNAME 
                ELSE NULL 
            END) AS VISITOR_TEAM_NICKNAME
    FROM game_events
    WHERE HOMEDESCRIPTION LIKE '%PTS%' OR VISITORDESCRIPTION LIKE '%PTS%'
    GROUP BY GAME_ID
),
Final_Scores AS (
    SELECT
        GAME_ID,
        REPLACE(SCORE, ' ', '') AS CLEAN_SCORE
    FROM (
        SELECT 
            GAME_ID,
            SCORE,
            ROW_NUMBER() OVER (PARTITION BY GAME_ID ORDER BY PERIOD DESC, EVENTNUM DESC) AS ROW_NUM
        FROM game_events
        WHERE SCORE IS NOT NULL AND SCORE != ''
    ) AS RankedScores
    WHERE ROW_NUM = 1
),
Game_Scores AS (
    SELECT
        tn.GAME_ID,
        tn.VISITOR_TEAM_NICKNAME AS TEAM_1,
        CAST(SPLIT(fs.CLEAN_SCORE, '-')[0] AS INT) AS TEAM_1_Score,
        tn.HOME_TEAM_NICKNAME AS TEAM_2,
        CAST(SPLIT(fs.CLEAN_SCORE, '-')[1] AS INT) AS TEAM_2_Score
    FROM Team_Names tn
    LEFT JOIN Final_Scores fs
    ON tn.GAME_ID = fs.GAME_ID
),
Team_Accumulated_Scores AS (
    SELECT 
        TEAM AS TEAM_NAME,
        SUM(SCORE) AS TOTAL_SCORE
    FROM (
        SELECT TEAM_1 AS TEAM, TEAM_1_Score AS SCORE
        FROM Game_Scores
        UNION ALL
        SELECT TEAM_2 AS TEAM, TEAM_2_Score AS SCORE
        FROM Game_Scores
    ) AS CombinedScores
    GROUP BY TEAM
),
Top_Teams AS (
    SELECT 
        TEAM_NAME,
        TOTAL_SCORE,
        RANK() OVER (ORDER BY TOTAL_SCORE DESC) AS RANK
    FROM Team_Accumulated_Scores
)
SELECT 
    TEAM_NAME,
    TOTAL_SCORE
FROM Top_Teams
WHERE RANK <= 5
ORDER BY TOTAL_SCORE DESC;



